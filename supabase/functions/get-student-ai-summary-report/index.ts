
// Supabase Edge Function: get-student-ai-summary-report

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2"; // Standard Supabase client

// Helper function to create CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*', // Allow all origins (for development)
  'Access-Control-Allow-Methods': 'POST, OPTIONS', // Allow POST and OPTIONS requests
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type', // Common headers
};

// Define interfaces for report structure (mirroring frontend)
interface QuizQuestionReview {
  questionText: string;
  studentAnswer: string;
  correctAnswer: string;
  isCorrect: boolean;
}
interface QuizReviewDetail {
  quizId: string;
  quizTitle: string;
  completedDate: string;
  score: number;
  maxScore: number;
  percentage: number;
  questions: QuizQuestionReview[]; 
}
interface AISummaryReport {
  overallSummary: string;
  strengths: string[];
  areasForImprovement: string[];
  activityAnalysis: string;
  quizReview?: QuizReviewDetail[];
  knowledgeGrowthChartData?: { date: string; score: number }[]; // For graphics
  gradeLevel?: string;
  studentName?: string; // Added studentName
  generatedAt?: string; // Timestamp of when this report was generated
  reportId?: string; // ID of the report in the database
}

// Mock AI Service
async function mockAIService(
  studentId: string,
  gradeLevel: string,
  studentName: string,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  _recentActivity: any[] // Placeholder for actual activity data
): Promise<AISummaryReport> {
  // Simulate AI processing delay
  await new Promise(resolve => setTimeout(resolve, 1000));

  // Mock data, similar to frontend but could be more dynamic
  const report: AISummaryReport = {
    studentName: studentName || "Student",
    overallSummary: `This is a mock AI summary for ${studentName || 'student'} (${gradeLevel}). It highlights progress and areas needing attention based on recent (mocked) activities.`,
    strengths: ["Good engagement in mock lessons", "Completed mock quizzes"],
    areasForImprovement: ["Understanding mock complex topics", "Mock quiz accuracy"],
    activityAnalysis: "Mock analysis: Student shows consistent effort. Further data will refine this.",
    quizReview: [
      {
        quizId: "mockQuiz1",
        quizTitle: "Mock Math Quiz (Generated by Edge Function)",
        completedDate: new Date().toISOString(),
        score: 7,
        maxScore: 10,
        percentage: 70,
        questions: [
          { questionText: "Mock Q1: 5 + 5 = ?", studentAnswer: "10", correctAnswer: "10", isCorrect: true },
          { questionText: "Mock Q2: 10 - 3 = ?", studentAnswer: "6", correctAnswer: "7", isCorrect: false },
        ],
      },
    ],
    knowledgeGrowthChartData: [
      { date: "2023-01-01", score: 60 },
      { date: "2023-02-01", score: 65 },
      { date: "2023-03-01", score: 75 },
      { date: "2023-04-01", score: 70 },
      { date: "2023-05-01", score: 80 },
    ],
    gradeLevel: gradeLevel,
    generatedAt: new Date().toISOString(),
  };
  return report;
}

serve(async (req) => {
  // Handle OPTIONS request for CORS preflight
  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS request for get-student-ai-summary-report');
    return new Response(null, { 
      status: 204, 
      headers: corsHeaders 
    });
  }

  try {
    const { studentId, gradeLevel, studentName, forceRefresh } = await req.json();
    
    console.log(`Processing request for student: ${studentId}, grade: ${gradeLevel}, name: ${studentName}, forceRefresh: ${forceRefresh}`);
    
    if (!studentId || !gradeLevel) {
      return new Response(
        JSON.stringify({ error: "studentId and gradeLevel are required" }),
        { status: 400, headers: { "Content-Type": "application/json", ...corsHeaders } }
      );
    }

    // Generate a simple mock report without using the database
    // This is a temporary solution to bypass the current DB issues
    console.log(`Generating basic mock report for student ${studentId}, grade ${gradeLevel}`);
    const newReport = await mockAIService(studentId, gradeLevel, studentName, []);
    
    return new Response(
      JSON.stringify(newReport),
      { 
        status: 200,
        headers: { 
          "Content-Type": "application/json", 
          "Cache-Control": "no-cache", 
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    console.error("Error in get-student-ai-summary-report function:", error);
    return new Response(
      JSON.stringify({ error: "Internal server error", details: error.message }),
      { status: 500, headers: { "Content-Type": "application/json", ...corsHeaders } }
    );
  }
});
